from __future__ import annotations
import pathlib
import zipfile
from typing import Iterator, Union

class ZipPath(zipfile.Path):
    def __enter__(self) -> ZipPath: ...
    def __exit__(self, *_) -> None: ...
    def __eq__(self, o: ZipPath) -> bool: ...
    def __lt__(self, o: ZipPath) -> bool: ...
    def iterdir(self) -> Iterator[ZipPath]: ...
    def joinpath(self, add: zipfile.StrPath) -> ZipPath: ...  # undocumented
    def __truediv__(self, add: zipfile.StrPath) -> ZipPath: ...
    def stat(self) -> _Zip_Stat_Result: ...
    @classmethod
    def from_zip_path(cls, path: str) -> ZipPath: ...

Union_Path = Union[pathlib.Path, ZipPath]

class _Zip_Stat_Result:
    st_size: int
    st_mtime: float
    def __init__(self, zip_info_obj: zipfile.ZipInfo) -> None: ...
